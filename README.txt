
                                  PNG FUNNEL
             by Robert Keller, robin@waste-of-time-and-money.com
                     Copyright (C) 2008 Robert Keller

    This program takes any file and converts it into a PNG image. It can
also convert any image generated by other programs with the exception of
interlaced images.


                        -----SYSTEM REQUIREMENTS-----
    -A Java Runtime Environment (JRE) version 1.5 or greater. This program
will run on Windows, Mac OS, and Linux with Java installed.
    -When converting files larger than 30 MB, free disk space equal to the
size of the image is required.


                           -----BASIC USAGE-----
    Double-click on the file PNGFunnel.jar to open the program. Use the
topmost "Choose file" button to select a file to translate to or from PNG.
Select the "Create PNG" button to convert to PNG or the "Decode PNG" button
to convert from PNG. If you are decoding a PNG that was not created with
PNG Funnel, you will be asked for a padding amount. This will be 0 unless
whoever gave you the file told you otherwise. For basic users, the keyfile
options and the "Calculate Dimensions" button are not required.


                             -----PADDING-----
    Whenever PNG Funnel opens a file, it has to calculate a width and
height that will fit the file's data. In order to maximize compatibility
with image readers, width and height are limited to 30000 x 30000. This
means that some files must have bytes added to them for them to fit
(there's a long math explanation behind this, see the MATH! section). PNG
Funnel does this automatically, but for this reason it is recommended that
files converted using PNGFunnel are also converted back using PNGFunnel.


 If you just want to convert back and forth normally, you can stop reading
now.
            You might want to look at the color section, though.


                 -----SECURE PNG FILES USING A KEYFILE-----
    If you don't want others to be able to read the PNG file that you've
created, you can use a keyfile to encode the image with color. To do this,
you must select a keyfile using the second "Choose file..." button. The
file you select should consist of 256 lines of 3 numbers each. Each line
represents an 8-bit RGB color value (meaning the numbers can range from 0
to 255). This color value will be encoded into the image instead of the
normal gray value. When you decide to decode the PNG, you will need to
select the same keyfile you used originally to get the original data back.

IMPORTANT: If your keyfile contains two duplicate lines, your file will not
be recoverable.

Two example keyfiles are included in this package, patriotic.txt and
sunset.txt. They can be found in the "keyfiles" folder.


               -----COLORED IMAGES USING AN INSECURE KEYFILE-----
    If you just want to encode your images with color, you can check the
box under the keyfile selection that says "Encode keyfile in image". This
will add your color code to the image as a palette, which speeds up
encoding and decoding IMMENSELY and reduces the file size for 99% of files
that are over 390 bytes. In order to decode one of these images, you only
need this program and not the original keyfile. Other programs, however
(like Photoshop) will be unable to convert the file back to its original
form.


                       -----CALCULATING DIMENSIONS-----
    If you've tried converting files to PNG using programs like Photoshop
and GraphicConverter, you know that in order to open them, you have to
specify dimensions. The "Calculate Dimensions" button does just that: It
shows you the file's size in bytes, the best dimensions for display, and
the padding required to achieve those dimensions. This is just in case PNG
Funnel converts too slowly for your tastes.


                           -----MAC ONLY STUFF-----
    This stuff isn't required to run the program, but if you have a mac,
you can open the keymaker.scpt file included with the program and use it to
make keyfiles for you. On the first line, change {{0,0,0},{255,255,255}} to
a list of any colors you want and click run. At the bottom, your keyfile
will appear. Copy and paste it into a text file and you're good to go!
Example list of colors: {{0,0,0},{85,85,85},{170,170,170},{255,255,255}}
This is just a grayscale, so change it!


          Below this is a discussion on how the program works.
                 You probably don't want to read this.



                            -----MATH!-----
1. File Padding
    This section deals with the problem of maximizing compatibility; that
is, Adobe Photoshop has a maximum image size of 30000 x 30000, which is not
always possible. If you don't like math, skip this section.
    We begin with the fact that this program converts with a ratio of one
byte of file data to one pixel in a PNG. This immediately tells us that we
have a file size limit of 30,000 x 30,000 = 900,000,000 bytes, or just
under 900 MB. Therefore files over 900 million bytes cannot be converted.
For files under that limit, we must find two numbers that when multiplied
equal the size of the original file. If possible, we would like to minimize
these numbers, as doing so would bring us in under the limit whenever
possible.
    Since two factors of a number are minimized when they are equal (a
square image), we begin testing with the square root of the image size.
From there, we increase the width and decrease the height until we find two
numbers that multiply to get the original file size. Since we are moving
constantly away from the square root, the first pair we find is guaranteed
to be the minimum possible values for width and height. Unfortunately, the
first pair that is found is not always valid (an easy example is with prime
numbers over 30,000; for any prime p the minimum dimensions are p and 1,
which is invalid).
    If the minimum pair is not valid, we are left with only one option:
change the file size. Since subtracting bytes would mean losing data, we
pad the file with bytes instead. Each time the file size is padded by one
byte, the minimum dimensions are calculated again. In this way, suitable
dimensions are always found for the image. (Note that the upper bound,
900,000,000, has valid minimum dimensions, so in the worst case file sizes
will stop there and not be padded to infinity) 

2. File Size
    This section deals with the difference between the three kinds of
encoding done by PNG Funnel and those done by other programs.
    PNG Funnel does not use filters due to the fact that most files that
will be converted will look more like static than images when they are
completed. Because of this, PNG Funnel's conversion requires far less code
than Photoshop's, but due to the programming language differences (Java vs
C), the actual difference is negligible. In some cases, such as converting
MS Word files, the output images CAN be filtered for smaller file size, but
PNG Funnel does not make this distinction. Hence Photoshop conversion has
the advantage over PNG Funnel's in the case of some file formats. If you
open a converted image and it has a large area of all one color or several
lines of all one or mostly one color, try converting the same file with
Photoshop and comparing the sizes.
    However, Photoshop adds four to six extra PNG data chunks to each file
it creates, while PNG Funnel adds only one to store padding information (a
total of 16 bytes added to the file). This gives PNG Funnel the advantage
for small files.
    Colored conversion is not supported with Photoshop (or any other
program that I know of, for that matter), so PNG Funnel has the advantage
there.
    Of the three ways that PNG Funnel can encode a file (normal, secure
keyfile, insecure keyfile), the normal way is the smallest. In fact, if we
asssume that the data in the file is random enough to make filters
negligible, PNG Filter outputs just 16 bytes over the theoretical minimum
file size (the 16 for storing padding information). Using an insecure
keyfile outputs the same file that a normal conversion would, only with an
additional 780 bytes of keyfile. Secure keyfile conversion is the largest
size, adding an extra two bytes to every pixel value in the image for
color.
    The algorithm best suited for converting a file between insecure and
secure keyfiles (normal is always the best) varies depending on the size of
the file to be converted. The intersection can be obtained by solving the
equation 784 + x = 3x, where x is the number of bytes in the file. The
solution is x = 392: files less than or equal to 392 bytes in size are
better off using a secure keyfile, while files greater than or equal to 392
bytes in size are better off using an insecure keyfile. Of course, this
doesn't take into account the compression of both files, but in order for
this conclusion to be incorrect, the secure keyfile-encoded file would have
to be reduced to less than one third of its original size, which is highly
improbable.

3. Miscellaneous
  This section lists some interesting statistics about the conversion
performed by PNG Funnel.
    Largest possible padding: 29,999 bytes, if your file is exactly
     899,970,001 bytes in length. No other number has this amount.
    Maximum file sizes for the three conversion methods (def(x) is the
     compressed form of x):
      Normal: 61 + def(900,000,000)
      Secure keyfile: 61 + def(2,700,000,000)
      Insecure keyfile: 845 + def(900,000,000)
    Minimum and maximum keyfile sizes: 1535 and 3328 bytes. The program
     lets you choose keyfiles based on this.


                        -----KNOWN ISSUES-----
    Not that these are really problems, but I'd like to say here that PNG
Funnel doesn't support interlaced files (too much work for too little gain)
or files over 900,000,000 bytes (wouldn't be compatible with other
programs). As workarounds, you can de-interlace any PNG file in any PNG
editing program and you can cut down file size by compressing it or using
my very own FSplit program to split the file into several pieces.


Thanks for downloading!
         -Robin, robin@waste-of-time-and-money.com